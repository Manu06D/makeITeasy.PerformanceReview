@page "/admin/usersxx"
@attribute [Authorize(Roles = "admin")]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using makeITeasy.AppFramework.Core.Commands
@using makeITeasy.PerformanceReview.BusinessCore.Queries.EmployeeQueries
@using makeITeasy.PerformanceReview.Models

<h3>User Admin Page</h3>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters" @bind-Value="model.Name" For="@(() => model.Name)" />
                    <MudTextField Label="Email" Class="mt-3" @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3" @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                    <MudSelect T="string" Label="Roles" @bind-Value="model.RoleId">
                        @foreach (var role in dbRoles)
                        {
                            <MudSelectItem T="string" Value="@role.Name">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                    @if(model.RoleId == "employee")
                    {
                        <MudAutocomplete T="IdentityUser" Label="Manager" @bind-Value="model.ManagerUser" 
                            SearchFunc="@SearchForManager" 
                        />
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Register">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Name { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 1)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

        [Required]
        public string RoleId { get; set; }

        [Required]
        public IdentityUser ManagerUser { get; set; }
    }

    [Inject]
    Infrastructure.Data.PeformanceReviewDbContext? dbContext { get; set; }
    [Inject]
    private UserManager<IdentityUser>? _userManager { get; set; }

    [Inject]
    private MediatR.IMediator _mediator { get; set; }

    [Inject]
    private IUserStore<IdentityUser>? _userStore { get; set; }

    private RegisterAccountForm model = new();
    private List<IdentityRole>? dbRoles;

    private void OnValidSubmit(EditContext context)
    {
        //StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        //TODO : check after role API
        dbRoles = dbContext?.Roles.ToList();
    }

    private async Task<IEnumerable<IdentityUser>> SearchForManager(string value)
    {
        if (value != null)
        {
            return (await _userManager.GetUsersInRoleAsync("manager")).Where(x => x?.Email != null && x.Email.StartsWith(value));
        }
        else
        {
            return (await _userManager.GetUsersInRoleAsync("manager"));
        }
    }

    async Task Register()
    {
        var newUser = Activator.CreateInstance<IdentityUser>();
        newUser.EmailConfirmed = true;
        newUser.Email = model.Email;
        newUser.NormalizedEmail = model.Email.ToUpper();
        await _userStore?.SetUserNameAsync(newUser, model.Email, CancellationToken.None);

        var result = await _userManager?.CreateAsync(newUser, model.Password);

        if (result.Succeeded)
        {
            var userId = await _userManager.GetUserIdAsync(newUser);

            await _userManager.AddToRoleAsync(newUser, model.RoleId);

            var results = await _mediator.Send(new AppFramework.Core.Queries.GenericQueryCommand<Employee>(new BasicEmployeeQuery() { UserIdentityId =  newUser.Id}, false));

            if(results.Results.Count == 0)
            {
                var dbCreationResult = await _mediator.Send(new CreateEntityCommand<Employee>(new Employee() { UserIdentityId = newUser.Id, ManagerIdentityId = model.ManagerUser.Id, Name = model.Name }));
            }
        }
    }
}
