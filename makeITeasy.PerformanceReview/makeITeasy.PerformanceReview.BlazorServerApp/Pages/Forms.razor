@page "/forms"

@using MediatR
@using makeITeasy.PerformanceReview.BusinessCore.Queries.PerformanceReviewFormQueries
@using makeITeasy.PerformanceReview.Models

<PageTitle>Counter</PageTitle>

<MudTable ServerData="@(new Func<TableState, Task<TableData<Form>>>(ServerReload))" SortLabel="Sort by" Bordered=true Striped=true @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Forms</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Id" T="Form" InitialDirection="SortDirection.Ascending">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Name" T="Form">Name</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="delete" @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code {
    [Inject]
    private IMediator _mediator { get; set; }

    private MudTable<Form> table;
    private string searchString = null;

    protected override async Task OnInitializedAsync()
    {
    
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task<TableData<Form>> ServerReload(TableState state)
    {
        var query = new BasicPerformanceReviewFormQuery();
        query.Name = searchString;
        query.Take = state.PageSize;
        query.Skip = state.Page * state.PageSize;

        var order = new AppFramework.Models.OrderBySpecification<string>(
            string.IsNullOrWhiteSpace(state.SortLabel) ? nameof(Form.Id) : state.SortLabel,
            state.SortDirection == SortDirection.Descending);

        query.AddOrder(order);

        var results = await _mediator.Send(new AppFramework.Core.Queries.GenericQueryCommand<Form>(query, true));

        return new TableData<Form>() { TotalItems = results.TotalItems, Items = results.Results };
    }

    private void Edit(int id)
    {
        //customer = customers.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        //customerService.DeleteCustomer(id);
        //snackBar.Add("Customer Deleted.", Severity.Success);
        //GetCustomers();
    }
}
