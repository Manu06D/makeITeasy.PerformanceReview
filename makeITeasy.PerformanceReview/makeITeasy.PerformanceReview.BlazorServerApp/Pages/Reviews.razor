@page "/reviews"
@using makeITeasy.AppFramework.Core.Commands
@using makeITeasy.AppFramework.Core.Interfaces
@using makeITeasy.PerformanceReview.BlazorServerApp.Shared.Components
@using makeITeasy.PerformanceReview.BusinessCore.Queries.EmployeeQueries
@using makeITeasy.PerformanceReview.BusinessCore.Queries.PerformanceReviewEvalutationQueries
@using makeITeasy.PerformanceReview.Models

<GenericList TItem=PerformanceReviewEvalutation TQuery=BasicPerformanceReviewEvalutationQuery Title="List of Reviews" CreateNewHandler="CreateNewAsync" DefaultSortColumn="Id" @ref="table">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Id" T="PerformanceReviewEvalutation" InitialDirection="SortDirection.Ascending">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Name" T="PerformanceReviewEvalutation">EmployeId</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Name" T="PerformanceReviewEvalutation">PerformanceReviewId</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.EmployeeId</MudTd>
        <MudTd DataLabel="Name">@context.PerformanceReviewId</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="delete" @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" @onclick="@(()=>DeleteAsync(@context))" Color="Color.Secondary"></MudIconButton>
        </MudTd>
    </RowTemplate>
</GenericList>

@code {

    public class PerformanceReviewEvalutationViewModel : IMapFrom<PerformanceReviewEvalutation>
    {
        public int Id { get; set; }
        public string PerformanceReviewFormName { get; set; }
        public string EmployeeName { get; set; }

        void Mapping(AutoMapper.Profile profile)
        {
            if (profile != null)
            {
                profile.CreateMap<PerformanceReviewEvalutation, PerformanceReviewEvalutationViewModel>()
                    .ForMember(dest => dest.EmployeeName, src => src.MapFrom(x => $"{x.Employee.FirstName} {x.Employee.LastName}"))
                    ;

            }
        }
    }

    [Inject]
    private IDialogService DialogService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    private MediatR.IMediator _mediator { get; set; }

    private GenericList<PerformanceReviewEvalutation, BasicPerformanceReviewEvalutationQuery> table;

    private async Task CreateNewAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, DisableBackdropClick = false };

        var dialog = DialogService.Show<ReviewNew_Part1>("Creating new Review", options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            int.TryParse(result.Data.ToString(), out int createdReview);
            Snackbar.Add($"Review Created (id:{createdReview})", Severity.Success);
            table.ReloadTable();
        }
    }

    private void Edit(int id)
    {
        //customer = customers.FirstOrDefault(c => c.Id == id);
    }

    private async Task DeleteAsync(PerformanceReviewEvalutation entity)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmDialog>("Delete", parameters, options);

        var dialogResult = await dialog.Result;

        if (!dialogResult.Cancelled)
        {
            var result = await _mediator.Send(new DeleteEntityCommand<PerformanceReviewEvalutation>(new PerformanceReviewEvalutation(){Id = entity.Id}));

            if (result.Result == CommandState.Success)
            {
                Snackbar.Add($"Review Deleted", Severity.Success);
                table.ReloadTable();
            }
        }
    }
}
