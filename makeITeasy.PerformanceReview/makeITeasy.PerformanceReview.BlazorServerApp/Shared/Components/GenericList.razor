@using makeITeasy.AppFramework.Models
@typeparam TItem where TItem : class, IBaseEntity
@typeparam TViewItem where TViewItem:class
@typeparam TQuery where TQuery:BaseTransactionQuery<TItem>, new()

<MudTable ServerData="@(new Func<TableState, Task<TableData<TViewItem>>>(ServerReload))" SortLabel="Sort by" Bordered=true Striped=true @ref="table" Loading=false>
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearchAsync(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" OnClick="CreateNewHandler"/>
    </ToolBarContent>
    <HeaderContent>
        @HeaderContent
    </HeaderContent>
    <RowTemplate>
        @RowTemplate(context)
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code {
    [Inject]
    private MediatR.IMediator _mediator { get; set; }

    [Parameter]
    public String Title { get; set; }

    [Parameter]
    public String DefaultSortColumn { get; set; }

    [Parameter]
    public Func<Task> CreateNewHandler { get; set; }

    [Parameter]
    public RenderFragment HeaderContent { get; set; }

    [Parameter]
    public RenderFragment<TViewItem> RowTemplate { get; set; }

    [Parameter]
    public TQuery Query { get; set; }

    private MudTable<TViewItem> table;
    private string searchString = null;


    protected override async Task OnInitializedAsync()
    {
    }

    private async Task OnSearchAsync(string text)
    {
        searchString = text;
        await ReloadTableAsync();
    }

    public async Task ReloadTableAsync()
    {
        await table.ReloadServerData();
    }

    private async Task<TableData<TViewItem>> ServerReload(TableState state)
    {
        if(Query == null)
        {
            Query = new ();           
        }

        //TODO : implement defaut search
        //query.Name = searchString;

        Query.Take = state.PageSize;
        Query.Skip = state.Page * state.PageSize;

        var order = new AppFramework.Models.OrderBySpecification<string>(
            string.IsNullOrWhiteSpace(state.SortLabel) ? DefaultSortColumn : state.SortLabel,
            state.SortDirection == SortDirection.Descending);

        Query.AddOrder(order);

        var results = await _mediator.Send(new AppFramework.Core.Queries.GenericQueryWithProjectCommand<TItem, TViewItem>(Query, true));

        return new TableData<TViewItem>() { TotalItems = results.TotalItems, Items = results.Results };
    }
}
