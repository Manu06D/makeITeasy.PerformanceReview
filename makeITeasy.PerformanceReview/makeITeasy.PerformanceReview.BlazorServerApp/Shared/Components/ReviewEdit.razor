@using makeITeasy.PerformanceReview.BusinessCore.Queries.PerformanceReviewEvalutationQueries
@using makeITeasy.PerformanceReview.Models

<h3>ReviewEdit : @Id </h3>
<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>
@if (evalution != null)
{

    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
          Items="@evalution.PerformanceReviewForm.PerformanceReviewItems"
          T=PerformanceReviewItem
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4">
        <ColGroup>

            <col style="width: 60px;" />
            <col />
            <col />
            <col />
            <col />
            <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">-- @($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Description</MudTd>
        <MudTd DataLabel="Sign">@context.Id</MudTd>
        <MudTd DataLabel="Name"></MudTd>
        <MudTd DataLabel="Position">@context.Category</MudTd>
        <MudTd Style="text-align: right" DataLabel="Molar mass"></MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">@*Total Mass: @context.Items.Sum((e) => e.Molar)*@</MudTh>
    </GroupFooterTemplate>
</MudTable>

    <p>review for : @evalution?.Employee?.FirstName + @evalution?.Employee?.LastName</p>

    <p>Evalution Title : @evalution?.PerformanceReviewForm?.Name</p>

    @foreach (var x in @evalution?.PerformanceReviewForm?.PerformanceReviewItems)
    {
        <p>@x.Description</p>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject]
    private MediatR.IMediator _mediator { get; set; }

    private bool loading = false;

    private PerformanceReviewEvalutation evalution;

        private TableGroupDefinition<PerformanceReviewItem> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Category
    };

    protected override async Task OnInitializedAsync()
    {
        evalution = (await _mediator.Send(new AppFramework.Core.Queries.GenericQueryCommand<PerformanceReviewEvalutation>(new EditPerformanceReviewEvalutationQuery(Id), false))).Results.FirstOrDefault();

        if (evalution == null)
        {
            //todo : trigger errors
        }
    }
}
