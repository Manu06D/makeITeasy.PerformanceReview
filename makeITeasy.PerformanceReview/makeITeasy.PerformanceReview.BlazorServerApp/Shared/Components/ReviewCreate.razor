@using makeITeasy.AppFramework.Core.Commands
@using makeITeasy.AppFramework.Core.Queries
@using makeITeasy.PerformanceReview.BusinessCore.Queries.EmployeeQueries
@using makeITeasy.PerformanceReview.BusinessCore.Queries.PerformanceReviewFormQueries
@using makeITeasy.PerformanceReview.Models

<MudForm @ref="form" @bind-IsValid="@success" Class="pa-4">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSelect T="Employee" Label="Employee" AnchorOrigin="Origin.BottomCenter" Clearable="true" Required="true"  @bind-Value="selectedEmployee">
                @foreach (Employee employee in employees)
                {
                    <MudSelectItem Value="@employee">@employee.LastName @employee.FirstName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect T="PerformanceReviewForm" Label="Review" AnchorOrigin="Origin.BottomCenter" Clearable="true" Required="true" @bind-Value="selectedForm">
                @foreach (PerformanceReviewForm form in forms)
                {
                    <MudSelectItem Value="@form">@form.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem Class="d-flex flex-row-reverse flex-grow-1 gap-4 ">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success || _processing)" OnClick="CreateReview">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Create</MudText>
                }
            </MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Inject]
    private MediatR.IMediator _mediator { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    private IList<Employee> employees = new List<Employee>();
    private IList<PerformanceReviewForm> forms = new List<PerformanceReviewForm>();

    private MudForm form;
    private bool success;
    private bool _processing = false;
    private PerformanceReviewForm selectedForm;
    private Employee selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        employees = (await _mediator.Send(new GenericQueryCommand<Employee>(new BasicEmployeeQuery()))).Results;
        forms = (await _mediator.Send(new GenericQueryCommand<PerformanceReviewForm>(new BasicPerformanceReviewFormQuery()))).Results;
    }

    async Task CreateReview()
    {
        _processing = true;
        var result = await _mediator.Send(new CreateEntityCommand<PerformanceReviewEvalutation>(new PerformanceReviewEvalutation() { EmployeeId = selectedEmployee.Id, PerformanceReviewFormId = selectedForm.Id, UserId = 1}));

        if(result.Result == CommandState.Success)
        {
            MudDialog.Close(DialogResult.Ok(result.Entity.Id));
        }
        else
        {
            //TODO Manage errors
            _processing = false;
        }
    }
}
